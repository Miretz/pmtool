scalar Date
scalar JSON

type Folder {
  id: String
  name: String
  parent: String
  description: String
  startDate: Date
  endDate: Date
  createdBy: String
  status: Status
  shareWith: [JSON]
}

type Query {
  getTeam: Team
  getFolders(parent: String): [Folder]
  getFolder(id: String!): Folder
  getUserById(id: String!): User
  getFolderTeams(id: String!): [Team]
  getStatuses: [Status]
}

type Status {
  id: String
  name: String
  color: String
}

type Team {
  id: String
  name: String
}

type Mutation {
  captureEmail(email: String!): User
  signup(id: String!, firstname: String!, lastname: String!, password: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  createFolder(parent: String, name: String!, description: String!): Folder
  updateFolder(id: String!, input: FolderInput): Folder
  deleteFolder(id: String!): Boolean
}

type User {
  id: String
  name: String
  firstname: String
  lastname: String
  email: String
  avatarColor: String
  jobTitle: String
  team: String
  role: String
  status: String
  createdAt: Date
}

type AuthPayload {
  token: String!
  user: User!
}

input FolderInput {
  name: String
  parent: String
  description: String
  shareWith: [ShareInput]
  startDate: Date
  endDate: Date
  status: StatusInput
}

input ShareInput {
  kind: String
  item: String
}

input StatusInput {
  id: String
  name: String
  color: String
}